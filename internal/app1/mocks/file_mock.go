// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/jeremycruzz/msds301-wk4.git/internal/app1/common"
)

// File is a mock of Service interface.
type File struct {
	ctrl     *gomock.Controller
	recorder *FileMockRecorder
}

// FileMockRecorder is the mock recorder for File.
type FileMockRecorder struct {
	mock *File
}

// NewFile creates a new mock instance.
func NewFile(ctrl *gomock.Controller) *File {
	mock := &File{ctrl: ctrl}
	mock.recorder = &FileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *File) EXPECT() *FileMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *File) Read() ([]common.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]common.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *FileMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*File)(nil).Read))
}

// Write mocks base method.
func (m *File) Write(results map[string]common.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", results)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *FileMockRecorder) Write(results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*File)(nil).Write), results)
}
